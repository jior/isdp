<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.glaf.isdp.mapper.ProjectTreeMapper">

	<resultMap id="projectTreeResultMap"	type="com.glaf.isdp.domain.ProjectTree">
		<id property="indexId" column="index_id" jdbcType="INTEGER" />
		<result property="id" column="id" jdbcType="VARCHAR"/>
		<result property="parentId" column="parent_id" jdbcType="INTEGER"/>
		<result property="indexName" column="index_name" jdbcType="VARCHAR"/>
		<result property="nlevel" column="nlevel" jdbcType="INTEGER"/>
		<result property="content" column="content" jdbcType="VARCHAR"/>
		<result property="nodeico" column="nodeico" jdbcType="INTEGER"/>
		<result property="listno" column="listno" jdbcType="INTEGER"/>
		<result property="inttype" column="inttype" jdbcType="INTEGER"/>
	</resultMap>

 
	<insert id="insertProjectTree" parameterType="com.glaf.isdp.domain.ProjectTree">
		insert into proj_tree 
		<trim prefix="(" suffix=")" suffixOverrides=",">
		    index_id
			<if test="id != null">
				,id 
			</if>
			<if test="parentId != null">
				,parent_id 
			</if>
			<if test="indexName != null">
				,index_name 
			</if>
			<if test="nlevel != null">
				,nlevel 
			</if>
			<if test="content != null">
				,content 
			</if>
			<if test="nodeico != null">
				,nodeico 
			</if>
			<if test="listno != null">
				,listno 
			</if>
			<if test="inttype != null">
				,inttype 
			</if>
		</trim>

		<trim prefix=" values (" suffix=")" suffixOverrides=",">
			  #{indexId, jdbcType=INTEGER}
	     
			<if test="id != null">
				,#{id, jdbcType=VARCHAR}
			</if>
			<if test="parentId != null">
				,#{parentId, jdbcType=INTEGER}
			</if>
			<if test="indexName != null">
				,#{indexName, jdbcType=VARCHAR}
			</if>
			<if test="nlevel != null">
				,#{nlevel, jdbcType=INTEGER}
			</if>
			<if test="content != null">
				,#{content, jdbcType=VARCHAR}
			</if>
			<if test="nodeico != null">
				,#{nodeico, jdbcType=INTEGER}
			</if>
			<if test="listno != null">
				,#{listno, jdbcType=INTEGER}
			</if>
			<if test="inttype != null">
				,#{inttype, jdbcType=INTEGER}
			</if>
		</trim>
	</insert>

	 
	<update id="updateProjectTree" parameterType="com.glaf.isdp.domain.ProjectTree">
		update
		proj_tree
		set
        <trim prefix="" suffix="" suffixOverrides=",">		
			<if test="id != null">
				id = #{id, jdbcType=VARCHAR},
			</if>
			<if test="parentId != null">
				parent_id = #{parentId, jdbcType=INTEGER},
			</if>
			<if test="indexName != null">
				index_name = #{indexName, jdbcType=VARCHAR},
			</if>
			<if test="nlevel != null">
				nlevel = #{nlevel, jdbcType=INTEGER},
			</if>
			<if test="content != null">
				content = #{content, jdbcType=VARCHAR},
			</if>
			<if test="nodeico != null">
				nodeico = #{nodeico, jdbcType=INTEGER},
			</if>
			<if test="listno != null">
				listno = #{listno, jdbcType=INTEGER},
			</if>
			<if test="inttype != null">
				inttype = #{inttype, jdbcType=INTEGER},
			</if>
        </trim>
		where
          index_id = #{indexId, jdbcType=INTEGER}
		
    </update>

 
	<delete id="deleteProjectTreeById" parameterType="string"> 
        delete from proj_tree
        where id = #{id}
	</delete>

	<delete id="deleteProjectTreeByIndexId" parameterType="int"> 
        delete from proj_tree
        where index_id = #{indexId}
	</delete>
	

	<delete id="deleteProjectTrees" parameterType="com.glaf.isdp.query.ProjectTreeQuery">
		delete from proj_tree
		where ( index_id IN
		<foreach item="x_rowId" index="index" collection="rowIds" open="(" separator="," close=")">
              #{x_rowId}
		</foreach>
		)
	</delete>


	<select id="getProjectTreeById" parameterType="string" resultMap="projectTreeResultMap">
		select * from proj_tree where id = #{id}
	</select>

	<select id="getProjectTreeByIndexId" parameterType="int" resultMap="projectTreeResultMap">
		select * from proj_tree where index_id = #{indexId}
	</select>


	<select id="getProjectTreeCount" 
		parameterType="map"
		resultType="int">
		select count(*)
		<include refid="selectProjectTreesSql" />
	</select>


	<select id="getProjectTreeCountByQueryCriteria" 
		parameterType="com.glaf.isdp.query.ProjectTreeQuery"
		resultType="int">
		select count(*)
		<include refid="selectProjectTreesSql" />
	</select>


	<select id="getProjectTrees" 
		parameterType="map"
		resultMap="projectTreeResultMap">
		select E.*
		<include refid="selectProjectTreesSql" />
		<if test="orderBy != null">
		   order by ${orderBy}
		</if>
	</select>

	<select id="getProjectTreesByQueryCriteria" 
		parameterType="com.glaf.isdp.query.ProjectTreeQuery"
		resultMap="projectTreeResultMap">
		select E.*
		<include refid="selectProjectTreesSql" />
		<if test="orderBy != null">
		   order by ${orderBy}
		</if>
	</select>


	<sql id="selectProjectTreesSql">

		from proj_tree E
		 
		<where>

		       1 = 1  

			<if test="idLike != null and idLike != '' ">
				and E.id like #{idLike}
			</if>

			<if test="ids != null and ids.size != 0">
			    and E.id IN
				<foreach item="x_id" index="index" collection="ids" 
					open="(" separator="," close=")">
                  #{x_id}
				</foreach>
			</if>

			<if test="parentId != null">
				and E.parent_id = #{parentId}
			</if>

			<if test="parentIds != null and parentIds.size != 0">
			    and E.parent_id IN
				<foreach item="x_parentId" index="index" collection="parentIds" 
					open="(" separator="," close=")">
                  #{x_parentId}
				</foreach>
			</if>
 

			<if test="indexNameLike != null and indexNameLike != '' ">
				and E.index_name like #{indexNameLike}
			</if>
 

			<if test="nlevel != null">
				and E.nlevel = #{nlevel}
			</if>

			<if test="nlevelGreaterThanOrEqual != null">
				and E.nlevel &gt;= #{nlevelGreaterThanOrEqual}
			</if>

			<if test="nlevelLessThanOrEqual != null">
				and E.nlevel &lt;= #{nlevelLessThanOrEqual}
			</if>

			<if test="nlevels != null and nlevels.size != 0">
			    and E.nlevel IN
				<foreach item="x_nlevel" index="index" collection="nlevels" 
					open="(" separator="," close=")">
                  #{x_nlevel}
				</foreach>
			</if>
 
			<if test="contentLike != null and contentLike != '' ">
				and E.content like #{contentLike}
			</if>
	 
			<if test="inttype != null">
				and E.inttype = #{inttype}
			</if>

			<if test="inttypeGreaterThanOrEqual != null">
				and E.inttype &gt;= #{inttypeGreaterThanOrEqual}
			</if>

			<if test="inttypeLessThanOrEqual != null">
				and E.inttype &lt;= #{inttypeLessThanOrEqual}
			</if>

			<if test="inttypes != null and inttypes.size != 0">
			    and E.inttype IN
				<foreach item="x_inttype" index="index" collection="inttypes" 
					open="(" separator="," close=")">
                  #{x_inttype}
				</foreach>
			</if>

		</where>
	</sql>

</mapper>