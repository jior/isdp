<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.glaf.isdp.mapper.UserTaskMapper">

	<resultMap id="userTaskResultMap" type="com.glaf.isdp.domain.UserTask">
		<id property="indexId" column="index_id" jdbcType="INTEGER" />
		<result property="id" column="id" jdbcType="VARCHAR" />
		<result property="parentId" column="parent_id" jdbcType="INTEGER" />
		<result property="actorId" column="actorId" jdbcType="VARCHAR" />
		<result property="name" column="name" jdbcType="VARCHAR" />
		<result property="indexName" column="index_name" jdbcType="VARCHAR" />
		<result property="activityId" column="activityId" jdbcType="VARCHAR" />
		<result property="startTime" column="startTime" jdbcType="TIMESTAMP" />
		<result property="endTime" column="endTime" jdbcType="TIMESTAMP" />
		<result property="state" column="state" jdbcType="INTEGER" />
		<result property="timelimit" column="timelimit" jdbcType="INTEGER" />
		<result property="listno" column="listno" jdbcType="INTEGER" />
		<result property="level" column="nlevel" jdbcType="INTEGER" />
		<result property="lastModified" column="lastModified"
			jdbcType="BIGINT" />
	</resultMap>
	

	<resultMap id="treepInfoResultMap2"	type="com.glaf.base.modules.sys.model.BaseTree">
		<id property="indexId" column="index_id" jdbcType="INTEGER" />
		<id property="parentId" column="parent_id" jdbcType="INTEGER" />
		<result property="indexName" column="index_name" jdbcType="VARCHAR"/>
	</resultMap>
	
	
	<resultMap id="idStringResultMap"	type="com.glaf.base.modules.sys.model.ObjectEntity">
		<id property="stringValue" column="id" jdbcType="VARCHAR" />
	</resultMap>
	
	
	<resultMap id="indexIdIntResultMap"	type="com.glaf.base.modules.sys.model.ObjectEntity">
		<id property="intValue" column="index_id" jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap id="ctimeDateResultMap"	type="com.glaf.base.modules.sys.model.ObjectEntity">
		<id property="dateValue" column="ctime" jdbcType="VARCHAR" />
	</resultMap>
	

	<insert id="insertUserTask" parameterType="com.glaf.isdp.domain.UserTask">
		insert into user_task
		<trim prefix="(" suffix=")" suffixOverrides=",">
			index_id, id ,parent_id
 
			<if test="actorId != null">
				,actorId
			</if>
			<if test="name != null">
				,name
			</if>
			<if test="indexName != null">
				,index_name
			</if>
			<if test="activityId != null">
				,activityId
			</if>
			<if test="startTime != null">
				,startTime
			</if>
			<if test="endTime != null">
				,endTime
			</if>
			<if test="state != null">
				,state
			</if>
			<if test="timelimit != null">
				,timelimit
			</if>
			<if test="listno != null">
				,listno
			</if>
			<if test="level != null">
				,nlevel
			</if>
			<if test="lastModified != null">
				,lastModified
			</if>
		</trim>

		<trim prefix=" values (" suffix=")" suffixOverrides=",">
			#{indexId, jdbcType=INTEGER}
		   ,#{id, jdbcType=VARCHAR}
           ,#{parentId, jdbcType=INTEGER}

			<if test="actorId != null">
				,#{actorId, jdbcType=VARCHAR}
			</if>
			<if test="name != null">
				,#{name, jdbcType=VARCHAR}
			</if>
			<if test="indexName != null">
				,#{indexName, jdbcType=VARCHAR}
			</if>
			<if test="activityId != null">
				,#{activityId, jdbcType=VARCHAR}
			</if>
			<if test="startTime != null">
				,#{startTime, jdbcType=TIMESTAMP}
			</if>
			<if test="endTime != null">
				,#{endTime, jdbcType=TIMESTAMP}
			</if>
			<if test="state != null">
				,#{state, jdbcType=INTEGER}
			</if>
			<if test="timelimit != null">
				,#{timelimit, jdbcType=INTEGER}
			</if>
			<if test="listno != null">
				,#{listno, jdbcType=INTEGER}
			</if>
			<if test="level != null">
				,#{level, jdbcType=INTEGER}
			</if>
			<if test="lastModified != null">
				,#{lastModified, jdbcType=BIGINT}
			</if>
		</trim>
	</insert>


	<delete id="deleteUserTaskById" parameterType="int">
		delete from user_task
		where id = #{id, jdbcType=INTEGER}
	</delete>


	<delete id="deleteUserTasks" parameterType="string">

		delete from user_task where actorId = #{actorId}
		 
	</delete>


	<select id="getUserTaskById" parameterType="int" resultMap="userTaskResultMap">
		select * from user_task where id = #{id}
	</select>


	<select id="getUserTaskByActorId" parameterType="string" resultMap="userTaskResultMap">

		select * from user_task where actorId = #{actorId}

	</select>
	
	
	<select id="getIndexUserTaskByActorId" parameterType="map" resultMap="userTaskResultMap">

		select * from user_task 
		where actorId = #{actorId}
		and index_name = 'activ'

	</select>


	<select id="getMyCellTaskIds" parameterType="map" resultMap="idStringResultMap">
		SELECT id
		FROM cell_mytaskmain
		WHERE (id IN
		(SELECT Main_id
		FROM flow_process
		WHERE EXISTS
		(SELECT *
		FROM flow_activ
		WHERE (userid = #{actorId}
		<if test="roleIds != null and roleIds.size != 0">
			OR (userid IS NULL AND netroleid IN
			<foreach item="x_roleId" index="index" collection="roleIds"
				open="(" separator="," close=")">
				#{x_roleId}
			</foreach>
			)
		</if>
		)
		<if test="state != null">
			AND state = #{state}
		</if>
		<if test="intback != null">
			AND intback = #{intback}
		</if>
		AND process_id = flow_process.id)))
		ORDER BY id DESC
	</select>


	<select id="getMyCellTaskIndexIds" parameterType="map" resultMap="indexIdIntResultMap">

		SELECT DISTINCT index_id
		FROM cell_mytaskmain
		WHERE (id IN
		<foreach item="x_taskId" index="index" collection="taskIds"
			open="(" separator="," close=")">
				#{x_taskId}
		</foreach>
		)
        ORDER BY index_id DESC

	</select>
	
	<select id="getMyCellTaskDates" parameterType="map" resultMap="ctimeDateResultMap">

		SELECT ctime
		FROM cell_mytaskmain
		WHERE (id IN
		<foreach item="x_taskId" index="index" collection="taskIds"
			open="(" separator="," close=")">
				#{x_taskId}
		</foreach>
		)
        ORDER BY ctime DESC

	</select>


	<select id="getMyTaskTrees" parameterType="int" resultMap="treepInfoResultMap2">

		SELECT index_name, index_id, parent_id
		FROM treepinfo
		WHERE (projtype IN ('1', '3')) AND
				 ((SELECT TOP 1 id
				FROM treepinfo
				WHERE index_id = #{indexId} ) LIKE id + '%')
		ORDER BY index_id

	</select>
	
	<select id="getMyTaskTreepinfos" parameterType="map" resultMap="treepInfoResultMap2">
		
		SELECT index_name, index_id, parent_id
		FROM treepinfo
		WHERE 1=1
		AND index_id IN
		<foreach item="x_indexId" index="index" collection="indexIds" open="(" separator="," close=")">
				#{x_indexId}
		</foreach>

	</select>
	
	<select id="getMyBaseTaskTrees" parameterType="com.glaf.base.modules.sys.model.ObjectEntity" resultMap="treepInfoResultMap2">

        SELECT index_name, index_id, parent_id
		FROM treepinfo
		WHERE ( projtype IN ('1', '3')) AND
			( 
				(( SELECT TOP 1 id FROM treepinfo WHERE index_id = -1 ) LIKE id + '%' ) 
				
			<foreach item="x_indexId" index="index" collection="intList"
				open=" " separator=" " close=" ">
				OR (( SELECT TOP 1 id FROM treepinfo WHERE index_id = #{x_indexId} ) LIKE id + '%' )
			</foreach>
			    
		    )
		ORDER BY index_id
		

	</select>


	<select id="getMyTaskTreesOfTypeA" parameterType="int" resultMap="treepInfoResultMap2">

		SELECT index_name, index_id
		FROM treepinfo
		WHERE (projtype IN ('a')) AND
				 ((SELECT TOP 1 id
				FROM treepinfo
				WHERE index_id = #{indexId}) LIKE id + '%')
		ORDER BY index_id

	</select>

	<select id="getMyTaskItemMap" parameterType="map" resultType="com.glaf.isdp.domain.IsdpTaskItem">

		SELECT c.id as activityId, a.id as taskMainId, a.ctime as createTime, a.index_id as indexId, 
		a.task_id as taskId, a.name as subject, a.projname as projectName, a.listno as listno, 
	    a.type_index_id as typeIndexId, a.flagint as flagint, a.mycell_tasks_id as mycellTasksId,
		a.fromtasksid as fromTasksId, a.totaskid as toTaskId, a.intfinish as intfinish, 
		a.type_tablename as typeTablename, a.type_id as typeId, a.userid as actorId, 
		a.netroleid as netRoleId, a.intisflow as intisflow, a.intStop as intStop, 
	    a.filetype_index filetypeIndex, c.state as state,c.ctime_start as startTime,
		c.ctime_end as endTime, c.timelimit as timelimit
		FROM cell_mytaskmain a INNER JOIN
			 flow_process b ON a.id = b.main_id INNER JOIN
			 flow_activ c ON b.id = c.process_id
		WHERE (a.id IN 
		<foreach item="x_taskId" index="index" collection="taskIds"
			open="(" separator="," close=")">
					#{x_taskId}
		</foreach>
		) AND 
			 (c.id IN
				 (SELECT id
			   FROM flow_activ
			   WHERE (userid = #{actorId} 
		<if test="roleIds != null and roleIds.size != 0">
							OR (userid IS NULL AND netroleid IN
			<foreach item="x_roleId" index="index" collection="roleIds"
				open="(" separator="," close=")">
								#{x_roleId}
			</foreach>
							)
		</if>
						)
		<if test="state != null">
			AND state = #{state}
		</if>
		<if test="intback != null">
			AND intback = #{intback}
		</if>
					 )) AND (a.index_id IN
				 (SELECT index_id
			   FROM treepinfo
			   WHERE id LIKE
						 (SELECT TOP 1 id
					   FROM treepinfo
					   WHERE index_id = #{indexId} ) + '%'))

	</select>
	
	<select id="getAllMyTaskItemMap" parameterType="map" resultType="com.glaf.isdp.domain.IsdpTaskItem">

		SELECT c.id as activityId, a.id as taskMainId, a.ctime as createTime, a.index_id as indexId, 
		a.task_id as taskId, a.name as subject, a.projname as projectName, a.listno as listno, 
	    a.type_index_id as typeIndexId, a.flagint as flagint, a.mycell_tasks_id as mycellTasksId,
		a.fromtasksid as fromTasksId, a.totaskid as toTaskId, a.intfinish as intfinish, 
		a.type_tablename as typeTablename, a.type_id as typeId, a.userid as actorId, 
		a.netroleid as netRoleId, a.intisflow as intisflow, a.intStop as intStop, 
	    a.filetype_index filetypeIndex, c.state as state,c.ctime_start as startTime,
		c.ctime_end as endTime, c.timelimit as timelimit
		FROM cell_mytaskmain a INNER JOIN
			 flow_process b ON a.id = b.main_id INNER JOIN
			 flow_activ c ON b.id = c.process_id
		WHERE (a.id IN 
		<foreach item="x_taskId" index="index" collection="taskIds"
			open="(" separator="," close=")">
					#{x_taskId}
		</foreach>
		) AND  (c.id IN
				 (SELECT id
			   FROM flow_activ
			   WHERE (userid = #{actorId} 
		<if test="roleIds != null and roleIds.size != 0">
							OR (userid IS NULL AND netroleid IN
			<foreach item="x_roleId" index="index" collection="roleIds"
				open="(" separator="," close=")">
								#{x_roleId}
			</foreach>
							)
		</if>
					)
						
		<if test="state != null">
			AND state = #{state}
		</if>
		<if test="intback != null">
			AND intback = #{intback}
		</if>
			 )
		   )  
	 
		 
		<if test="ctimeGreaterThanOrEqual != null">
			AND a.ctime &gt;= #{ctimeGreaterThanOrEqual}
		</if>
		<if test="ctimeLessThanOrEqual != null">
			AND a.ctime &lt;= #{ctimeLessThanOrEqual}
		</if>		   
			

	</select>

	<select id="getUserTaskCount" parameterType="map" resultType="int">
		select count(*)
		<include refid="selectUserTasksSql" />
	</select>


	<select id="getUserTaskCountByQueryCriteria" parameterType="com.glaf.isdp.query.UserTaskQuery"
		resultType="int">
		select count(*)
		<include refid="selectUserTasksSql" />
	</select>


	<select id="getUserTasks" parameterType="map" resultMap="userTaskResultMap">
		
		select E.*
		
		<include refid="selectUserTasksSql" />
		
		<choose>
			<when test="orderBy != null and orderBy != '' ">
			order by ${orderBy}
			</when>
			<otherwise>
			 order by E.startTime desc
			</otherwise>
		</choose>
		
	</select>

	<select id="getUserTasksByQueryCriteria" parameterType="com.glaf.isdp.query.UserTaskQuery"
		resultMap="userTaskResultMap">
		
		select E.*
		
		<include refid="selectUserTasksSql" />
		
		<choose>
			<when test="orderBy != null and orderBy != '' ">
			  order by ${orderBy}
			</when>
			<otherwise>
			  order by E.startTime desc
			</otherwise>
		</choose>
		
	</select>


	<sql id="selectUserTasksSql">

		from user_task E

		<where>

			1 = 1

			<if test="parentId != null and parentId != '' ">
				and E.parent_id = #{parentId}
			</if>

			<if test="parentIds != null and parentIds.size != 0">
				and E.parent_id IN
				<foreach item="x_parentId" index="index" collection="parentIds"
					open="(" separator="," close=")">
					#{x_parentId}
				</foreach>
			</if>
			
			<if test="parentIdNotEqual != null and parentIdNotEqual != null ">
				and E.parent_id != #{parentIdNotEqual}
			</if>

			<if test="actorId != null and actorId != '' ">
				and E.actorId = #{actorId}
			</if>

			<if test="actorIds != null and actorIds.size != 0">
				and E.actorId IN
				<foreach item="x_actorId" index="index" collection="actorIds"
					open="(" separator="," close=")">
					#{x_actorId}
				</foreach>
			</if>
			
			<if test="name != null and name != '' ">
				and E.name = #{name}
			</if>

			<if test="nameLike != null and nameLike != '' ">
				and E.name like #{nameLike}
			</if>

			<if test="indexNameLike != null and indexNameLike != '' ">
				and E.index_name like #{indexNameLike}
			</if>

			<if test="activityId != null and activityId != '' ">
				and E.activityId = #{activityId}
			</if>

			<if test="activityIds != null and activityIds.size != 0">
				and E.activityId IN
				<foreach item="x_activityId" index="index" collection="activityIds"
					open="(" separator="," close=")">
					#{x_activityId}
				</foreach>
			</if>

			<if test="startTimeGreaterThanOrEqual != null">
				and E.startTime &gt;= #{startTimeGreaterThanOrEqual}
			</if>

			<if test="startTimeLessThanOrEqual != null">
				and E.startTime &lt;= #{startTimeLessThanOrEqual}
			</if>

			<if test="endTimeGreaterThanOrEqual != null">
				and E.endTime &gt;= #{endTimeGreaterThanOrEqual}
			</if>

			<if test="endTimeLessThanOrEqual != null">
				and E.endTime &lt;= #{endTimeLessThanOrEqual}
			</if>

			<if test="state != null">
				and E.state = #{state}
			</if>

			<if test="stateGreaterThanOrEqual != null">
				and E.state &gt;= #{stateGreaterThanOrEqual}
			</if>

			<if test="stateLessThanOrEqual != null">
				and E.state &lt;= #{stateLessThanOrEqual}
			</if>

			<if test="states != null and states.size != 0">
				and E.state IN
				<foreach item="x_state" index="index" collection="states"
					open="(" separator="," close=")">
					#{x_state}
				</foreach>
			</if>

			<if test="timelimitGreaterThanOrEqual != null">
				and E.timelimit &gt;= #{timelimitGreaterThanOrEqual}
			</if>

			<if test="timelimitLessThanOrEqual != null">
				and E.timelimit &lt;= #{timelimitLessThanOrEqual}
			</if>

			<if test="lastModifiedGreaterThanOrEqual != null">
				and E.lastModified &gt;=
				#{lastModifiedGreaterThanOrEqual}
			</if>

			<if test="lastModifiedLessThanOrEqual != null">
				and E.lastModified &lt;= #{lastModifiedLessThanOrEqual}
			</if>

		</where>
	</sql>

</mapper>