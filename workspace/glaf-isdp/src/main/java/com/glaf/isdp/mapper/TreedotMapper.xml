<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.glaf.isdp.mapper.TreedotMapper">

	<resultMap id="treedotResultMap"	type="com.glaf.isdp.domain.Treedot">
		<id property="indexId" column="index_id" jdbcType="INTEGER" />
		<result property="id" column="id" jdbcType="VARCHAR"/>
		<result property="parentId" column="parent_id" jdbcType="INTEGER"/>
		<result property="indexName" column="index_name" jdbcType="VARCHAR"/>
		<result property="nlevel" column="nlevel" jdbcType="INTEGER"/>
		<result property="num" column="num" jdbcType="VARCHAR"/>
		<result property="content" column="content" jdbcType="VARCHAR"/>
		<result property="sindexName" column="sindex_name" jdbcType="VARCHAR"/>
		<result property="nodeico" column="nodeico" jdbcType="INTEGER"/>
		<result property="listno" column="listno" jdbcType="INTEGER"/>
		<result property="menuid" column="menuid" jdbcType="INTEGER"/>
		<result property="isend" column="isend" jdbcType="INTEGER"/>
		<result property="sysmenuid" column="sysmenuid" jdbcType="VARCHAR"/>
		<result property="type" column="type" jdbcType="INTEGER"/>
		<result property="filenumid" column="filenumid" jdbcType="VARCHAR"/>
		<result property="filenumid2" column="filenumid2" jdbcType="VARCHAR"/>
		<result property="projIndex" column="proj_index" jdbcType="INTEGER"/>
		<result property="domainIndex" column="domain_index" jdbcType="INTEGER"/>
	</resultMap>
	
	<resultMap id="idStringResultMap53"	type="com.glaf.isdp.domain.ObjectEntity">
		<id property="stringValue" column="id" jdbcType="VARCHAR" />
	</resultMap>

 
	<insert id="insertTreedot" parameterType="com.glaf.isdp.domain.Treedot">
		insert into treedot 
		<trim prefix="(" suffix=")" suffixOverrides=",">
		    index_id
			<if test="id != null">
				,id 
			</if>
			<if test="parentId != null">
				,parent_id 
			</if>
			<if test="indexName != null">
				,index_name 
			</if>
			<if test="nlevel != null">
				,nlevel 
			</if>
			<if test="num != null">
				,num 
			</if>
			<if test="content != null">
				,content 
			</if>
			<if test="sindexName != null">
				,sindex_name 
			</if>
			<if test="nodeico != null">
				,nodeico 
			</if>
			<if test="listno != null">
				,listno 
			</if>
			<if test="menuid != null">
				,menuid 
			</if>
			<if test="isend != null">
				,isend 
			</if>
			<if test="sysmenuid != null">
				,sysmenuid 
			</if>
			<if test="type != null">
				,type 
			</if>
			<if test="filenumid != null">
				,filenumid 
			</if>
			<if test="filenumid2 != null">
				,filenumid2 
			</if>
			<if test="projIndex != null">
				,proj_index 
			</if>
			<if test="domainIndex != null">
				,domain_index 
			</if>
		</trim>

		<trim prefix=" values (" suffix=")" suffixOverrides=",">
			  #{indexId, jdbcType=INTEGER}
	     
			<if test="id != null">
				,#{id, jdbcType=VARCHAR}
			</if>
			<if test="parentId != null">
				,#{parentId, jdbcType=INTEGER}
			</if>
			<if test="indexName != null">
				,#{indexName, jdbcType=VARCHAR}
			</if>
			<if test="nlevel != null">
				,#{nlevel, jdbcType=INTEGER}
			</if>
			<if test="num != null">
				,#{num, jdbcType=VARCHAR}
			</if>
			<if test="content != null">
				,#{content, jdbcType=VARCHAR}
			</if>
			<if test="sindexName != null">
				,#{sindexName, jdbcType=VARCHAR}
			</if>
			<if test="nodeico != null">
				,#{nodeico, jdbcType=INTEGER}
			</if>
			<if test="listno != null">
				,#{listno, jdbcType=INTEGER}
			</if>
			<if test="menuid != null">
				,#{menuid, jdbcType=INTEGER}
			</if>
			<if test="isend != null">
				,#{isend, jdbcType=INTEGER}
			</if>
			<if test="sysmenuid != null">
				,#{sysmenuid, jdbcType=VARCHAR}
			</if>
			<if test="type != null">
				,#{type, jdbcType=INTEGER}
			</if>
			<if test="filenumid != null">
				,#{filenumid, jdbcType=VARCHAR}
			</if>
			<if test="filenumid2 != null">
				,#{filenumid2, jdbcType=VARCHAR}
			</if>
			<if test="projIndex != null">
				,#{projIndex, jdbcType=INTEGER}
			</if>
			<if test="domainIndex != null">
				,#{domainIndex, jdbcType=INTEGER}
			</if>
		</trim>
	</insert>

	 
	<update id="updateTreedot" parameterType="com.glaf.isdp.domain.Treedot">
		update treedot
		set
        <trim prefix="" suffix="" suffixOverrides=",">		
			<if test="id != null">
				id = #{id, jdbcType=VARCHAR},
			</if>
			<if test="parentId != null">
				parent_id = #{parentId, jdbcType=INTEGER},
			</if>
			<if test="indexName != null">
				index_name = #{indexName, jdbcType=VARCHAR},
			</if>
			<if test="nlevel != null">
				nlevel = #{nlevel, jdbcType=INTEGER},
			</if>
			<if test="num != null">
				num = #{num, jdbcType=VARCHAR},
			</if>
			<if test="content != null">
				content = #{content, jdbcType=VARCHAR},
			</if>
			<if test="sindexName != null">
				sindex_name = #{sindexName, jdbcType=VARCHAR},
			</if>
			<if test="nodeico != null">
				nodeico = #{nodeico, jdbcType=INTEGER},
			</if>
			<if test="listno != null">
				listno = #{listno, jdbcType=INTEGER},
			</if>
			<if test="menuid != null">
				menuid = #{menuid, jdbcType=INTEGER},
			</if>
			<if test="isend != null">
				isend = #{isend, jdbcType=INTEGER},
			</if>
			<if test="sysmenuid != null">
				sysmenuid = #{sysmenuid, jdbcType=VARCHAR},
			</if>
			<if test="type != null">
				type = #{type, jdbcType=INTEGER},
			</if>
			<if test="filenumid != null">
				filenumid = #{filenumid, jdbcType=VARCHAR},
			</if>
			<if test="filenumid2 != null">
				filenumid2 = #{filenumid2, jdbcType=VARCHAR},
			</if>
			<if test="projIndex != null">
				proj_index = #{projIndex, jdbcType=INTEGER},
			</if>
			<if test="domainIndex != null">
				domain_index = #{domainIndex, jdbcType=INTEGER},
			</if>
        </trim>
		where
          index_id = #{indexId, jdbcType=INTEGER}
		
    </update>

 
	<delete id="deleteTreedotById" parameterType="int"> 
        delete from treedot
        where index_id = #{id}
	</delete>

	<delete id="deleteTreedotByIndexId" parameterType="int"> 
        delete from treedot
        where index_id = #{indexId}
	</delete>
	

	<delete id="deleteTreedots" parameterType="com.glaf.isdp.query.TreedotQuery">
		delete from treedot
		where ( index_id IN
		<foreach item="x_rowId" index="index" collection="rowIds" open="(" separator="," close=")">
              #{x_rowId}
		</foreach>
		)
	</delete>


	<select id="getTreedotById" parameterType="string" resultMap="treedotResultMap">
		select * from treedot where id = #{id}
	</select>
	
	
	<select id="getTreedotsByIdLike" parameterType="map" resultMap="treedotResultMap">
		select * from treedot where ${idLike} = like id+'%'
	</select>
	

	<select id="getTreedotByIndexId" parameterType="int" resultMap="treedotResultMap">
		select * from treedot where index_id = #{indexId}
	</select>
	
	
	<select id="getTreedotIdsByIndexId" parameterType="int" resultMap="idStringResultMap53">
		
        select id from treedot where index_id in(
            select index_id from filedot where fileid in(
                select filedot_fileid from cell_treedot_dot where index_id = #{indexId}
            )
        )

	</select>


	<select id="getTreedotCount" 
		parameterType="map"
		resultType="int">
		select count(*)
		<include refid="selectTreedotsSql" />
	</select>


	<select id="getTreedotCountByQueryCriteria" 
		parameterType="com.glaf.isdp.query.TreedotQuery"
		resultType="int">
		select count(*)
		<include refid="selectTreedotsSql" />
	</select>


	<select id="getTreedots" 
		parameterType="map"
		resultMap="treedotResultMap">
		select E.*
		<include refid="selectTreedotsSql" />
		<if test="orderBy != null">
		   order by ${orderBy}
		</if>
	</select>

	<select id="getTreedotsByQueryCriteria" 
		parameterType="com.glaf.isdp.query.TreedotQuery"
		resultMap="treedotResultMap">
		select E.*
		<include refid="selectTreedotsSql" />
		<if test="orderBy != null">
		   order by ${orderBy}
		</if>
	</select>


	<sql id="selectTreedotsSql">

		from treedot E
		 
		<where>

		       1 = 1  
 

			<if test="idLike != null and idLike != '' ">
				and E.id like #{idLike}
			</if>

			<if test="ids != null and ids.size() &gt; 0">
			    and E.id IN
				<foreach item="x_id" index="index" collection="ids" 
					open="(" separator="," close=")">
                  #{x_id}
				</foreach>
			</if>
			
			
			<if test="parentId != null">
				and E.parent_id = #{parentId}
			</if>

			<if test="parentIds != null and parentIds.size() &gt; 0">
			    and E.parent_id IN
				<foreach item="x_parentId" index="index" collection="parentIds" 
					open="(" separator="," close=")">
                  #{x_parentId}
				</foreach>
			</if>
 

			<if test="indexNameLike != null and indexNameLike != '' ">
				and E.index_name like #{indexNameLike}
			</if>
 
			<if test="nlevel != null">
				and E.nlevel = #{nlevel}
			</if>

			<if test="nlevelGreaterThanOrEqual != null">
				and E.nlevel &gt;= #{nlevelGreaterThanOrEqual}
			</if>

			<if test="nlevelLessThanOrEqual != null">
				and E.nlevel &lt;= #{nlevelLessThanOrEqual}
			</if>

			<if test="nlevels != null and nlevels.size() &gt; 0">
			    and E.nlevel IN
				<foreach item="x_nlevel" index="index" collection="nlevels" 
					open="(" separator="," close=")">
                  #{x_nlevel}
				</foreach>
			</if>
 
			<if test="numLike != null and numLike != '' ">
				and E.num like #{numLike}
			</if>

			<if test="contentLike != null and contentLike != '' ">
				and E.content like #{contentLike}
			</if>
  
			<if test="sindexNameLike != null and sindexNameLike != '' ">
				and E.sindex_name like #{sindexNameLike}
			</if>

			<if test="menuid != null">
				and E.menuid = #{menuid}
			</if>

			<if test="menuidGreaterThanOrEqual != null">
				and E.menuid &gt;= #{menuidGreaterThanOrEqual}
			</if>

			<if test="menuidLessThanOrEqual != null">
				and E.menuid &lt;= #{menuidLessThanOrEqual}
			</if>

			<if test="menuids != null and menuids.size() &gt; 0">
			    and E.menuid IN
				<foreach item="x_menuid" index="index" collection="menuids" 
					open="(" separator="," close=")">
                  #{x_menuid}
				</foreach>
			</if>


			<if test="isend != null">
				and E.isend = #{isend}
			</if>

			<if test="isendGreaterThanOrEqual != null">
				and E.isend &gt;= #{isendGreaterThanOrEqual}
			</if>

			<if test="isendLessThanOrEqual != null">
				and E.isend &lt;= #{isendLessThanOrEqual}
			</if>

			<if test="isends != null and isends.size() &gt; 0">
			    and E.isend IN
				<foreach item="x_isend" index="index" collection="isends" 
					open="(" separator="," close=")">
                  #{x_isend}
				</foreach>
			</if>

	        
			<if test="sysmenuid != null and sysmenuid != '' ">
				and E.sysmenuid = #{sysmenuid}
			</if>

			<if test="sysmenuidLike != null and sysmenuidLike != '' ">
				and E.sysmenuid like #{sysmenuidLike}
			</if>

			<if test="sysmenuids != null and sysmenuids.size() &gt; 0">
			    and E.sysmenuid IN
				<foreach item="x_sysmenuid" index="index" collection="sysmenuids" 
					open="(" separator="," close=")">
                  #{x_sysmenuid}
				</foreach>
			</if>


			<if test="type != null">
				and E.type = #{type}
			</if>

			<if test="typeGreaterThanOrEqual != null">
				and E.type &gt;= #{typeGreaterThanOrEqual}
			</if>

			<if test="typeLessThanOrEqual != null">
				and E.type &lt;= #{typeLessThanOrEqual}
			</if>

			<if test="types != null and types.size() &gt; 0">
			    and E.type IN
				<foreach item="x_type" index="index" collection="types" 
					open="(" separator="," close=")">
                  #{x_type}
				</foreach>
			</if>

	        
			<if test="filenumid != null and filenumid != '' ">
				and E.filenumid = #{filenumid}
			</if>

			<if test="filenumidLike != null and filenumidLike != '' ">
				and E.filenumid like #{filenumidLike}
			</if>

			<if test="filenumids != null and filenumids.size() &gt; 0">
			    and E.filenumid IN
				<foreach item="x_filenumid" index="index" collection="filenumids" 
					open="(" separator="," close=")">
                  #{x_filenumid}
				</foreach>
			</if>

	        
			<if test="filenumid2 != null and filenumid2 != '' ">
				and E.filenumid2 = #{filenumid2}
			</if>

			<if test="filenumid2Like != null and filenumid2Like != '' ">
				and E.filenumid2 like #{filenumid2Like}
			</if>

			<if test="filenumid2s != null and filenumid2s.size() &gt; 0">
			    and E.filenumid2 IN
				<foreach item="x_filenumid2" index="index" collection="filenumid2s" 
					open="(" separator="," close=")">
                  #{x_filenumid2}
				</foreach>
			</if>


			<if test="projIndex != null">
				and E.proj_index = #{projIndex}
			</if>

			<if test="projIndexGreaterThanOrEqual != null">
				and E.proj_index &gt;= #{projIndexGreaterThanOrEqual}
			</if>

			<if test="projIndexLessThanOrEqual != null">
				and E.proj_index &lt;= #{projIndexLessThanOrEqual}
			</if>

			<if test="projIndexs != null and projIndexs.size() &gt; 0">
			    and E.proj_index IN
				<foreach item="x_projIndex" index="index" collection="projIndexs" 
					open="(" separator="," close=")">
                  #{x_projIndex}
				</foreach>
			</if>


			<if test="domainIndex != null">
				and E.domain_index = #{domainIndex}
			</if>

			<if test="domainIndexGreaterThanOrEqual != null">
				and E.domain_index &gt;= #{domainIndexGreaterThanOrEqual}
			</if>

			<if test="domainIndexLessThanOrEqual != null">
				and E.domain_index &lt;= #{domainIndexLessThanOrEqual}
			</if>

			<if test="domainIndexs != null and domainIndexs.size() &gt; 0">
			    and E.domain_index IN
				<foreach item="x_domainIndex" index="index" collection="domainIndexs" 
					open="(" separator="," close=")">
                  #{x_domainIndex}
				</foreach>
			</if>

			 
		</where>
	</sql>

</mapper>