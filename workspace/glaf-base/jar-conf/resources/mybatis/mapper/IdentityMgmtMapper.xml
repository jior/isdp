<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.glaf.core.mapper.IdentityMgmtMapper">


	<resultMap id="sysRoleResultMap" type="com.glaf.core.identity.impl.RoleImpl">
		<id property="roleId" column="ID" jdbcType="INTEGER" />
		<result property="code" column="CODE" jdbcType="VARCHAR" />
		<result property="name" column="ROLENAME" jdbcType="VARCHAR" />
		<result property="busiessId" column="BUSIESS_ID" jdbcType="VARCHAR" />
        <result property="domainIndex" column="DOMAIN_INDEX" jdbcType="INTEGER" />
	</resultMap>


	<resultMap id="sysUserResultMap" type="com.glaf.core.identity.impl.UserImpl">
		<id property="actorId" column="UserID" jdbcType="VARCHAR" />
		<result property="activationCode" column="UserID" jdbcType="VARCHAR" />
		<result property="name" column="UserName" jdbcType="VARCHAR" />
		<result property="deptId" column="depid" jdbcType="INTEGER" />
		<result property="mail" column="email" jdbcType="VARCHAR" />
		<result property="mobile" column="Mobile" jdbcType="VARCHAR" />
		<result property="password" column="Password" jdbcType="VARCHAR" />
		<result property="adminFlag" column="issystem" jdbcType="VARCHAR" />
		<result property="domainIndex" column="domain_index" jdbcType="INTEGER" />
	</resultMap>

	<resultMap id="baseTreeResultMap" type="com.glaf.core.base.BaseTree">
        <id property="id" column="id" jdbcType="BIGINT" />
        <result property="parentId" column="parent" jdbcType="BIGINT"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="desc" column="nodedesc" jdbcType="VARCHAR"/>
        <result property="sort" column="sort" jdbcType="INTEGER"/>
        <result property="code" column="code" jdbcType="VARCHAR"/>
        <result property="icon" column="icon" jdbcType="VARCHAR"/>
        <result property="iconCls" column="iconCls" jdbcType="VARCHAR"/>
        <result property="url" column="url" jdbcType="VARCHAR"/>
        <result property="locked" column="locked" jdbcType="INTEGER"/>
	</resultMap>


	<insert id="insertSysTree" parameterType="com.glaf.core.base.BaseTree">
		insert into sys_tree
		<trim prefix="(" suffix=")" suffixOverrides=",">
			ID
			<if test="parentId != null">
				,PARENT
			</if>
			<if test="name != null">
				,NAME
			</if>
			<if test="desc != null">
				,NODEDESC
			</if>
			<if test="discriminator != null">
				,DISCRIMINATOR
			</if>
			<if test="treeId != null">
				,TREEID
			</if>
			<if test="sort != null">
				,SORT
			</if>
			<if test="code != null">
				,CODE
			</if>
			<if test="icon != null">
				,icon
			</if>
			<if test="iconCls != null">
				,iconCls
			</if>
			<if test="url != null">
				,url
			</if>
			<if test="locked != null">
				,locked
			</if>
			<if test="createDate != null">
				,CREATEDATE 
			</if>
			<if test="createBy != null">
				,CREATEBY 
			</if>
			<if test="updateBy != null">
				,UPDATEBY 
			</if>
			<if test="updateDate != null">
				,UPDATEDATE 
			</if>
		</trim>

		<trim prefix=" values (" suffix=")" suffixOverrides=",">
			#{id, jdbcType=BIGINT}

			<if test="parentId != null">
				,#{parentId, jdbcType=BIGINT}
			</if>
			<if test="name != null">
				,#{name, jdbcType=VARCHAR}
			</if>
			<if test="desc != null">
				,#{desc, jdbcType=VARCHAR}
			</if>
			<if test="discriminator != null">
				,#{discriminator, jdbcType=VARCHAR}
			</if>
			<if test="treeId != null">
				,#{treeId, jdbcType=VARCHAR}
			</if>
			<if test="sort != null">
				,#{sort, jdbcType=INTEGER}
			</if>
			<if test="code != null">
				,#{code, jdbcType=VARCHAR}
			</if>
			<if test="icon != null">
				,#{icon, jdbcType=VARCHAR}
			</if>
			<if test="iconCls != null">
				,#{iconCls, jdbcType=VARCHAR}
			</if>
			<if test="url != null">
				,#{url, jdbcType=VARCHAR}
			</if>
			<if test="locked != null">
				,#{locked, jdbcType=INTEGER}
			</if>
			<if test="createDate != null">
				,#{createDate, jdbcType=TIMESTAMP}
			</if>
			<if test="createBy != null">
				,#{createBy, jdbcType=VARCHAR}
			</if>
			<if test="updateBy != null">
				,#{updateBy, jdbcType=VARCHAR}
			</if>
			<if test="updateDate != null">
				,#{updateDate, jdbcType=TIMESTAMP}
			</if>
		</trim>
	</insert>


	<update id="updateSysTree" parameterType="com.glaf.core.base.BaseTree">
		update sys_tree
		set
		<trim prefix="" suffix="" suffixOverrides=",">
			<if test="parentId != null">
				PARENT = #{parentId, jdbcType=BIGINT},
			</if>
			<if test="name != null">
				NAME = #{name, jdbcType=VARCHAR},
			</if>
			<if test="desc != null">
				NODEDESC = #{desc, jdbcType=VARCHAR},
			</if>
			<if test="discriminator != null">
				DISCRIMINATOR = #{discriminator, jdbcType=VARCHAR},
			</if>
			<if test="treeId != null">
				TREEID = #{treeId, jdbcType=VARCHAR},
			</if>
			<if test="sort != null">
				SORT = #{sort, jdbcType=INTEGER},
			</if>
			<if test="code != null">
				CODE = #{code, jdbcType=VARCHAR},
			</if>
			<if test="icon != null">
				icon = #{icon, jdbcType=VARCHAR},
			</if>
			<if test="iconCls != null">
				iconCls = #{iconCls, jdbcType=VARCHAR},
			</if>
			<if test="url != null">
				url = #{url, jdbcType=VARCHAR},
			</if>
			<if test="locked != null">
				locked = #{locked, jdbcType=INTEGER},
			</if>
			<if test="updateBy != null">
				UPDATEBY = #{updateBy, jdbcType=VARCHAR},
			</if>
			<if test="updateDate != null">
				UPDATEDATE = #{updateDate, jdbcType=TIMESTAMP},
			</if>
		</trim>
		where
		ID = #{id, jdbcType=BIGINT}

	</update>


	<select id="getTreeModelById" parameterType="long" resultMap="baseTreeResultMap">
		select * from sys_tree where id = #{id}
	</select>


	<select id="getTreeModelByCode" parameterType="string" resultMap="baseTreeResultMap">
		select * from sys_tree where code = #{code}
	</select>


	<select id="getChildrenTreeModels" parameterType="long" resultMap="baseTreeResultMap">
		select * from sys_tree where parent = #{parentId}
	</select>


	<select id="getTreeModels" parameterType="com.glaf.core.query.TreeModelQuery"
		resultMap="baseTreeResultMap">

		select E.* from sys_tree E

		<where>
			1 = 1

			<if test="parentId != null">
				and E.PARENT = #{parentId}
			</if>

			<if test="parentIds != null and parentIds.size != 0">
				and E.PARENT IN
				<foreach item="x_parentId" index="index" collection="parentIds"
					open="(" separator="," close=")">
					#{x_parentId}
				</foreach>
			</if>

			<if test="discriminator != null and discriminator != '' ">
				and E.DISCRIMINATOR = #{discriminator}
			</if>

			<if test="name != null and name != '' ">
				and E.NAME = #{name}
			</if>

			<if test="nameLike != null and nameLike != '' ">
				and E.NAME like #{nameLike}
			</if>

			<if test="descLike != null and descLike != '' ">
				and E.NODEDESC like #{descLike}
			</if>

			<if test="sortGreaterThanOrEqual != null">
				and E.SORT &gt;= #{sortGreaterThanOrEqual}
			</if>

			<if test="sortGreaterThan != null">
				and E.SORT &gt; #{sortGreaterThan}
			</if>

			<if test="sortLessThanOrEqual != null">
				and E.SORT &lt;= #{sortLessThanOrEqual}
			</if>

			<if test="sortLessThan != null">
				and E.SORT &lt; #{sortLessThan}
			</if>

			<if test="code != null and code != '' ">
				and E.CODE = #{code}
			</if>

			<if test="codeLike != null and codeLike != '' ">
				and E.CODE like #{codeLike}
			</if>

			<if test="codes != null and codes.size != 0">
				and E.CODE IN
				<foreach item="x_code" index="index" collection="codes"
					open="(" separator="," close=")">
					#{x_code}
				</foreach>
			</if>

			<if test="locked != null">
				and E.locked = #{locked}
			</if>

			<if test="lockedGreaterThanOrEqual != null">
				and E.locked &gt;= #{lockedGreaterThanOrEqual}
			</if>

			<if test="lockedLessThanOrEqual != null">
				and E.locked &lt;= #{lockedLessThanOrEqual}
			</if>

		</where>

		<choose>
			<when test="orderBy != null">
				order by ${orderBy}
			</when>
			<otherwise>
				order by E.SORT asc
			</otherwise>
		</choose>
	</select>


	<select id="getAgents" resultType="com.glaf.core.identity.impl.AgentImpl" parameterType="string">

		select  ASSIGNFROM_ as assignFrom, ASSIGNTO_ as assignTo,
		        OBJECTID_ as objectId, OBJECTVALUE_ as objectValue,
                PROCESSNAME_ as processName, TASKNAME_ as taskName,
				AGENTTYPE_ as agentType, STARTDATE_ as startDate, 
				ENDDATE_ as endDate
		from sys_agent
		where ASSIGNTO_ = #{assignTo}

	</select>

  
	<select id="getMembershipUsers" resultMap="sysUserResultMap"
		    parameterType="com.glaf.core.query.MembershipQuery">

		SELECT DISTINCT x.UserID, x.UserName, x.email, x.Mobile, x.depid, x.issystem, x.domain_index
		FROM UserInfo x

		<if test="roleId != null">
			INNER JOIN userrole r
			ON x.UserID = r.USERID
		</if>

		WHERE 1=1

		<if test="roleId != null">
			AND r.roleid= #{roleId} 
		</if>
 
 		<if test="nodeId != null">
			AND ( x.depid = #{nodeId} ) 
		</if>

		<if test="nodeIds != null and nodeIds.size !=0">
			AND x.depid IN
			<foreach item="x_deptId" index="index" collection="nodeIds"
				open="(" separator="," close=")">
				#{x_deptId}
            </foreach>
		</if>

	</select>


	<select id="getXYDeptRoleUsers" resultMap="sysUserResultMap"
		    parameterType="com.glaf.core.query.MembershipQuery">

		SELECT DISTINCT x.UserID, x.UserName, x.email, x.Mobile, x.depid, x.issystem, x.domain_index
		FROM UserInfo x

		<if test="roleId != null">
			INNER JOIN userrole r
			ON x.USERID = r.USERID
		</if>

		WHERE 1=1

		<if test="roleId != null">
			AND r.roleid = #{roleId} 
		</if>

		<if test="nodeId != null">
			AND ( x.depid = #{nodeId} ) 
		</if>

		<if test="nodeIds != null and nodeIds.size !=0">
			AND x.depid IN
			<foreach item="x_deptId" index="index" collection="nodeIds"
				open="(" separator="," close=")">
				#{x_deptId}
            </foreach>
		</if>

	</select>


	<select id="getRoleById" resultMap="sysRoleResultMap" parameterType="int">

		SELECT r.id, r.rolename, r.busiess_id, r.domain_index
		FROM net_role r
		WHERE r.id = #{roleId} 

	</select>


	<select id="getRoleUsers" resultMap="sysUserResultMap" parameterType="int">

		SELECT x.UserID, x.UserName, x.email, x.Mobile, x.depid, x.issystem, x.domain_index
		FROM UserInfo x
		INNER JOIN userrole r
		ON x.USERID = r.USERID
		WHERE r.roleid = #{roleId}
		ORDER BY x.UserID ASC

	</select>


	<select id="searchUsers" resultMap="sysUserResultMap" parameterType="string">

		SELECT x.UserID, x.UserName, x.email, x.Mobile, x.depid, x.issystem, x.domain_index 
		FROM UserInfo x
		WHERE 1=1 
		AND (
		   x.UserID LIKE #{searchWord}
		   OR 
		   x.UserName LIKE #{searchWord}
		   OR
		   x.email LIKE #{searchWord}
		   OR
		   x.Mobile LIKE #{searchWord}
		)
		 
		ORDER BY x.UserID ASC

	</select>


	<select id="getUsers" resultMap="sysUserResultMap"
		parameterType="com.glaf.core.query.UserQuery">

		SELECT x.UserID, x.UserName, x.email, x.Mobile, x.depid, x.Password, x.issystem, x.domain_index
		FROM UserInfo x
		WHERE 1=1 

		<choose>
			<when test="activationCode != null">
				and x.UserID = #{activationCode} 
			</when>
			<when test="actorId != null">
				and x.UserID = #{actorId} 
			</when>
			<when test="actorIds != null and actorIds.size !=0">
				and x.UserID IN
				<foreach item="x_actorId" index="index" collection="actorIds"
					open="(" separator="," close=")">
					#{x_actorId}
                </foreach>
			</when>
			<when test="deptId != null">
				AND ( x.depid = #{deptId} ) 
			</when>
			<when test="deptIds != null and deptIds.size !=0">
				AND x.depid IN
				<foreach item="x_deptId" index="index" collection="deptIds"
					open="(" separator="," close=")">
					#{x_deptId}
				</foreach>
			</when>
			<otherwise>
			</otherwise>
		</choose>

		ORDER BY x.UserID ASC

	</select>


	<select id="getUserById" resultMap="sysUserResultMap" parameterType="string">

		SELECT x.UserID, x.UserName, x.email, x.Mobile, x.depid, x.Password, x.issystem, x.domain_index
		FROM UserInfo x 
		WHERE x.UserID = #{actorId}
		ORDER BY x.UserID ASC

	</select>


	<select id="getRoles" resultMap="sysRoleResultMap"
		parameterType="com.glaf.core.query.RoleQuery">

		SELECT r.id, r.rolename
		FROM net_role r 
		WHERE 1=1

		<if test="roleId != null">
			and ( r.id = #{roleId} )
		</if>

		<if test="roleIds != null and roleIds.size !=0">
			and r.id IN
			<foreach item="x_roleId" index="index" collection="roleIds"
				open="(" separator="," close=")">
				#{x_roleId}
            </foreach>
		</if>

	</select>


	<select id="getDepartments" resultType="com.glaf.core.base.BaseTree"
		parameterType="com.glaf.core.query.TreeModelQuery">

		select D.ID as id, D.NAME as name, D.CODE as code, D.DEPTDESC as description, D.SORT as sortNo,
        D.CREATETIME as createDate, D.CREATEBY as createBy, D.DEPTLEVEL as level, D.STATUS as locked
		from SYS_DEPARTMENT D
		inner join SYS_TREE T
		on D.NODEID = T.ID
		WHERE 1=1

		 
		<if test="codeLike != null">
			and ( D.CODE = #{codeLike} )
		</if>

		<if test="nameLike != null">
			and ( D.NAME = #{nameLike} )
		</if>

		<if test="nodeIds != null and nodeIds.size !=0">
			and D.NODEID IN
			<foreach item="x_nodeId" index="index" collection="nodeIds"
				open="(" separator="," close=")">
				#{x_nodeId}
            </foreach>
		</if>

	</select>

    <select id="getUserRoleCodes" resultType="string"
		parameterType="com.glaf.core.query.MembershipQuery">

		select distinct r.CODE from net_role r
		inner join userrole ur
		on r.ID = ur.ROLEID
		inner join UserInfo u
		on ur.USERID = u.USERID
		where r.CODE is not null

		<choose>
			<when test="actorId != null">
				and u.UserID = #{actorId} 
			</when>
			<when test="actorIds != null and actorIds.size !=0">
				and u.UserID IN
				<foreach item="x_actorId" index="index" collection="actorIds"
					open="(" separator="," close=")">
					#{x_actorId}
                </foreach>
			</when>
			<when test="nodeId != null">
				and ( u.depid = #{nodeId} ) 
			</when>
			<when test="nodeIds != null and nodeIds.size !=0">
				and u.depid IN
				<foreach item="x_nodeId" index="index" collection="nodeIds"
					open="(" separator="," close=")">
					#{x_nodeId}
				</foreach>
			</when>
			<otherwise>
			  and 1=0
			</otherwise>
		</choose>

		union 

		select E.code from sys_application E
		inner join sys_access A
		on E.id = A.appId
		where E.code is not null 
		and A.roleId in (
			select ur.id from userrole ur
			inner join UserInfo u
			on ur.USERID = u.USERID
			where 1=1

			 <choose>
				<when test="actorId != null">
					and u.UserID = #{actorId} 
				</when>
				<when test="actorIds != null and actorIds.size !=0">
					and u.UserID IN
					<foreach item="x_actorId" index="index" collection="actorIds"
						open="(" separator="," close=")">
						#{x_actorId}
					</foreach>
				</when>
				<when test="nodeId != null">
					and ( u.depid = #{nodeId} ) 
				</when>
				<when test="nodeIds != null and nodeIds.size !=0">
					and u.depid IN
					<foreach item="x_nodeId" index="index" collection="nodeIds"
						open="(" separator="," close=")">
						#{x_nodeId}
					</foreach>
				</when>
				<otherwise>
				  and 1=0
				</otherwise>
			</choose>
		) 

        union 

		select E.CODE from sys_function E
		inner join sys_permission A
		on E.id = A.funcId
		where E.CODE is not null
		and A.roleId in (
			select ur.id from userrole ur
			inner join UserInfo u
			on ur.USERID = u.USERID
			where 1=1

			 <choose>
				<when test="actorId != null">
					and u.UserID = #{actorId} 
				</when>
				<when test="actorIds != null and actorIds.size !=0">
					and u.UserID IN
					<foreach item="x_actorId" index="index" collection="actorIds"
						open="(" separator="," close=")">
						#{x_actorId}
					</foreach>
				</when>
				<when test="nodeId != null">
					and ( u.depid = #{nodeId} ) 
				</when>
				<when test="nodeIds != null and nodeIds.size !=0">
					and u.depid IN
					<foreach item="x_nodeId" index="index" collection="nodeIds"
						open="(" separator="," close=")">
						#{x_nodeId}
					</foreach>
				</when>
				<otherwise>
				  and 1=0
				</otherwise>
			</choose>
		)
 
	</select>

</mapper>