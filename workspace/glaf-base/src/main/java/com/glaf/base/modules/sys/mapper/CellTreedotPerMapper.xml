<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.glaf.base.modules.sys.mapper.CellTreedotPerMapper">

	<resultMap id="cellTreedotPerResultMap"	type="com.glaf.base.modules.sys.model.CellTreedotPer">
		<id property="id" column="id" jdbcType="VARCHAR"/>
		<result property="indexId" column="index_id" jdbcType="INTEGER"/>
		<result property="parentId" column="parent_id" jdbcType="INTEGER"/>
		<result property="indexName" column="index_name" jdbcType="VARCHAR"/>
		<result property="nlevel" column="nlevel" jdbcType="INTEGER"/>
		<result property="nodeico" column="nodeico" jdbcType="INTEGER"/>
		<result property="fromid" column="fromid" jdbcType="VARCHAR"/>
		<result property="listno" column="listno" jdbcType="INTEGER"/>
		<result property="intuserper" column="intuserper" jdbcType="INTEGER"/>
		<result property="menuIndex" column="menu_index" jdbcType="INTEGER"/>
	</resultMap>

	<resultMap id="cellTreedotPerHashMap"	type="java.util.HashMap">
		<id property="id" column="id" jdbcType="VARCHAR"/>
		<result property="indexId" column="index_id" jdbcType="INTEGER"/>
		<result property="parentId" column="parent_id" jdbcType="INTEGER"/>
		<result property="indexName" column="index_name" jdbcType="VARCHAR"/>
		<result property="nlevel" column="nlevel" jdbcType="INTEGER"/>
		<result property="nodeico" column="nodeico" jdbcType="INTEGER"/>
		<result property="fromid" column="fromid" jdbcType="VARCHAR"/>
		<result property="listno" column="listno" jdbcType="INTEGER"/>
		<result property="intuserper" column="intuserper" jdbcType="INTEGER"/>
		<result property="menuIndex" column="menu_index" jdbcType="INTEGER"/>
	</resultMap>
 
 
	<insert id="insertCellTreedotPer" parameterType="com.glaf.base.modules.sys.model.CellTreedotPer">
		insert into cell_treedot_per 
		<trim prefix="(" suffix=")" suffixOverrides=",">
		    id
			<if test="indexId != null">
				,index_id 
			</if>
			<if test="parentId != null">
				,parent_id 
			</if>
			<if test="indexName != null">
				,index_name 
			</if>
			<if test="nlevel != null">
				,nlevel 
			</if>
			<if test="nodeico != null">
				,nodeico 
			</if>
			<if test="fromid != null">
				,fromid 
			</if>
			<if test="listno != null">
				,listno 
			</if>
			<if test="intuserper != null">
				,intuserper 
			</if>
			<if test="menuIndex != null">
				,menu_index 
			</if>
		</trim>

		<trim prefix=" values (" suffix=")" suffixOverrides=",">
			  #{id, jdbcType=VARCHAR}
	     
			<if test="indexId != null">
				,#{indexId, jdbcType=INTEGER}
			</if>
			<if test="parentId != null">
				,#{parentId, jdbcType=INTEGER}
			</if>
			<if test="indexName != null">
				,#{indexName, jdbcType=VARCHAR}
			</if>
			<if test="nlevel != null">
				,#{nlevel, jdbcType=INTEGER}
			</if>
			<if test="nodeico != null">
				,#{nodeico, jdbcType=INTEGER}
			</if>
			<if test="fromid != null">
				,#{fromid, jdbcType=VARCHAR}
			</if>
			<if test="listno != null">
				,#{listno, jdbcType=INTEGER}
			</if>
			<if test="intuserper != null">
				,#{intuserper, jdbcType=INTEGER}
			</if>
			<if test="menuIndex != null">
				,#{menuIndex, jdbcType=INTEGER}
			</if>
		</trim>
	</insert>

	 
	<update id="updateCellTreedotPer" parameterType="com.glaf.base.modules.sys.model.CellTreedotPer">
		update
		    cell_treedot_per
		set
		<trim prefix="" suffix="" suffixOverrides=",">		
			<if test="indexId != null">
				index_id = #{indexId, jdbcType=INTEGER},
			</if>
			<if test="parentId != null">
				parent_id = #{parentId, jdbcType=INTEGER},
			</if>
			<if test="indexName != null">
				index_name = #{indexName, jdbcType=VARCHAR},
			</if>
			<if test="nlevel != null">
				nlevel = #{nlevel, jdbcType=INTEGER},
			</if>
			<if test="nodeico != null">
				nodeico = #{nodeico, jdbcType=INTEGER},
			</if>
			<if test="fromid != null">
				fromid = #{fromid, jdbcType=VARCHAR},
			</if>
			<if test="listno != null">
				listno = #{listno, jdbcType=INTEGER},
			</if>
			<if test="intuserper != null">
				intuserper = #{intuserper, jdbcType=INTEGER},
			</if>
			<if test="menuIndex != null">
				menu_index = #{menuIndex, jdbcType=INTEGER},
			</if>
		</trim>
		where
          id = #{id, jdbcType=VARCHAR}
		
	</update>

 
	<delete id="deleteCellTreedotPerById" parameterType="string"> 
        delete from cell_treedot_per
        where id = #{id}
	</delete>
	

	<delete id="deleteCellTreedotPers" parameterType="com.glaf.base.modules.sys.query.CellTreedotPerQuery">
		delete from cell_treedot_per
		where ( id IN
		<foreach item="x_rowId" index="index" collection="rowIds" open="(" separator="," close=")">
              #{x_rowId}
		</foreach>
		)
	</delete>


	<select id="getCellTreedotPerById" parameterType="string" resultMap="cellTreedotPerResultMap">
		select * from cell_treedot_per where id = #{id}
	</select>

	
	<select id="getCellTreedotPerCount" 
		parameterType="map"
		resultType="int">
		select count(*)
		<include refid="selectCellTreedotPersSql" />
	</select>


	<select id="getCellTreedotPerCountByQueryCriteria" 
		parameterType="com.glaf.base.modules.sys.query.CellTreedotPerQuery"
		resultType="int">
		select count(*)
		<include refid="selectCellTreedotPersSql" />
	</select>


	<select id="getCellTreedotPers" 
		parameterType="map"
		resultMap="cellTreedotPerResultMap">
		
		select E.*
		
		<include refid="selectCellTreedotPersSql" />
		
		<choose>
			<when test="orderBy != null">
		   order by ${orderBy}
			</when>
			<otherwise>
				order by E.parent_id, E.listno
			</otherwise>
		</choose>
		
	</select>

	<select id="getCellTreedotPersByQueryCriteria" 
		parameterType="com.glaf.base.modules.sys.query.CellTreedotPerQuery"
		resultMap="cellTreedotPerResultMap">
		
		select E.*
		
		<include refid="selectCellTreedotPersSql" />
		
		<choose>
			<when test="orderBy != null">
		   order by ${orderBy}
			</when>
			<otherwise>
				order by E.parent_id, E.listno
			</otherwise>
		</choose>
		
	</select>


	<sql id="selectCellTreedotPersSql">

		from cell_treedot_per E
		 
		<where>

		       1 = 1  

			<if test="indexId != null">
				and E.index_id = #{indexId}
			</if>

			<if test="indexIdGreaterThanOrEqual != null">
				and E.index_id &gt;= #{indexIdGreaterThanOrEqual}
			</if>

			<if test="indexIdLessThanOrEqual != null">
				and E.index_id &lt;= #{indexIdLessThanOrEqual}
			</if>

			<if test="indexIds != null and indexIds.size != 0">
			    and E.index_id IN
				<foreach item="x_indexId" index="index" collection="indexIds" 
					open="(" separator="," close=")">
                  #{x_indexId}
				</foreach>
			</if>


			<if test="idLike != null and idLike != '' ">
				and E.id like #{idLike}
			</if>
			
			<if test="ids != null and ids.size != 0">
			    and E.id IN
				<foreach item="x_id" index="index" collection="ids" 
					open="(" separator="," close=")">
                  #{x_id}
				</foreach>
			</if>
						
			<if test="parentId != null">
				and E.parent_id = #{parentId}
			</if>

			<if test="parentIds != null and parentIds.size != 0">
			    and E.parent_id IN
				<foreach item="x_parentId" index="index" collection="parentIds" 
					open="(" separator="," close=")">
                  #{x_parentId}
				</foreach>
			</if>
 

			<if test="indexNameLike != null and indexNameLike != '' ">
				and E.index_name like #{indexNameLike}
			</if>

		 
			<if test="nlevel != null">
				and E.nlevel = #{nlevel}
			</if>

			<if test="nlevelGreaterThanOrEqual != null">
				and E.nlevel &gt;= #{nlevelGreaterThanOrEqual}
			</if>

			<if test="nlevelLessThanOrEqual != null">
				and E.nlevel &lt;= #{nlevelLessThanOrEqual}
			</if>

			<if test="nlevels != null and nlevels.size != 0">
			    and E.nlevel IN
				<foreach item="x_nlevel" index="index" collection="nlevels" 
					open="(" separator="," close=")">
                  #{x_nlevel}
				</foreach>
			</if>
 
			<if test="fromid != null and fromid != '' ">
				and E.fromid = #{fromid}
			</if>

			<if test="fromidLike != null and fromidLike != '' ">
				and E.fromid like #{fromidLike}
			</if>

			<if test="fromids != null and fromids.size != 0">
			    and E.fromid IN
				<foreach item="x_fromid" index="index" collection="fromids" 
					open="(" separator="," close=")">
                  #{x_fromid}
				</foreach>
			</if>

			<if test="intuserper != null">
				and E.intuserper = #{intuserper}
			</if>

			<if test="intuserperGreaterThanOrEqual != null">
				and E.intuserper &gt;= #{intuserperGreaterThanOrEqual}
			</if>

			<if test="intuserperLessThanOrEqual != null">
				and E.intuserper &lt;= #{intuserperLessThanOrEqual}
			</if>

			<if test="intuserpers != null and intuserpers.size != 0">
			    and E.intuserper IN
				<foreach item="x_intuserper" index="index" collection="intuserpers" 
					open="(" separator="," close=")">
                  #{x_intuserper}
				</foreach>
			</if>


			<if test="menuIndex != null">
				and E.menu_index = #{menuIndex}
			</if>

			<if test="menuIndexGreaterThanOrEqual != null">
				and E.menu_index &gt;= #{menuIndexGreaterThanOrEqual}
			</if>

			<if test="menuIndexLessThanOrEqual != null">
				and E.menu_index &lt;= #{menuIndexLessThanOrEqual}
			</if>

			<if test="menuIndexs != null and menuIndexs.size != 0">
			    and E.menu_index IN
				<foreach item="x_menuIndex" index="index" collection="menuIndexs" 
					open="(" separator="," close=")">
                  #{x_menuIndex}
				</foreach>
			</if>

			 
		</where>
	</sql>

</mapper>